;; Analyzed by ClojureScript 0.0-3169
{:use-macros nil, :excludes #{}, :name arity.core, :imports nil, :requires {cstr clojure.string, clojure.string clojure.string, clojure.browser.repl clojure.browser.repl, repl clojure.browser.repl}, :uses nil, :defs {area {:protocol-inline nil, :meta {:file nil, :arglists (quote ([s] [w h] [b1 b2 h])), :doc "Area of square, rectangle, and trapezoid", :end-column 11, :end-line 38, :column 7, :line 38}, :name arity.core/area, :variadic false, :file "src/arity/core.cljs", :end-column 11, :method-params ([s] [w h] [b1 b2 h]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1} {:tag number, :variadic false, :max-fixed-arity 2} {:tag number, :variadic false, :max-fixed-arity 3}), :line 38, :end-line 38, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s] [w h] [b1 b2 h])), :doc "Area of square, rectangle, and trapezoid", :test true}, name2 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([surname given & others])), :doc "Reformat name, converting middle names to initials.", :end-column 12, :end-line 33, :column 7, :line 33}, :name arity.core/name2, :variadic true, :file "src/arity/core.cljs", :end-column 12, :method-params ([surname given others]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic true, :max-fixed-arity 2}), :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([surname given & others])), :doc "Reformat name, converting middle names to initials.", :test true}, make-initials {:protocol-inline nil, :meta {:file nil, :arglists (quote ([names])), :end-column 20, :end-line 28, :column 7, :line 28}, :name arity.core/make-initials, :variadic false, :file "src/arity/core.cljs", :end-column 20, :method-params ([names]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any string}, :variadic false, :max-fixed-arity 1}), :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([names])), :test true}, name1 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([surname given middle])), :doc "Reformat name, converting middle name to an initial.", :end-column 12, :end-line 23, :column 7, :line 23}, :name arity.core/name1, :variadic false, :file "src/arity/core.cljs", :end-column 12, :method-params ([surname given middle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :line 23, :end-line 23, :max-fixed-arity 3, :fn-var true, :arglists (quote ([surname given middle])), :doc "Reformat name, converting middle name to an initial.", :test true}, cartesian {:protocol-inline nil, :meta {:file nil, :arglists (quote ([{:keys [r theta]}])), :doc "Convert polar coordinate (radius, degrees) to cartesian (x,y)", :end-column 16, :end-line 17, :column 7, :line 17}, :name arity.core/cartesian, :variadic false, :file "src/arity/core.cljs", :end-column 16, :method-params ([p__115]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 1}), :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [r theta]}])), :doc "Convert polar coordinate (radius, degrees) to cartesian (x,y)", :test true}, polar-example {:file "src/arity/core.cljs", :meta {:file nil, :end-column 19, :end-line 15, :column 6, :line 15}, :line 15, :column 1, :end-line 15, :end-column 19, :test true, :name arity.core/polar-example}, radians {:protocol-inline nil, :meta {:file nil, :arglists (quote ([d])), :doc "Convert degrees to radians", :end-column 14, :end-line 10, :column 7, :line 10}, :name arity.core/radians, :variadic false, :file "src/arity/core.cljs", :end-column 14, :method-params ([d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([d])), :doc "Convert degrees to radians", :test true}, conn {:file "src/arity/core.cljs", :meta {:file nil, :end-column 14, :end-line 5, :column 10, :line 5}, :line 5, :column 1, :end-line 5, :end-column 14, :test true, :name arity.core/conn}}, :require-macros nil, :cljs.analyzer/constants {:order [:r :theta :x :y], :seen #{:y :r :theta :x}}, :doc nil}