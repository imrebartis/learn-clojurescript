;; Analyzed by ClojureScript 0.0-3169
{:defs {update-page {:protocol-inline nil, :meta {:file nil, :arglists (quote ([evt])), :end-column 18, :end-line 26, :column 7, :line 26}, :name wordcount.core/update-page, :variadic false, :file "src/wordcount/core.cljs", :end-column 18, :method-params ([evt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([evt])), :test true}, make-list {:protocol-inline nil, :meta {:file nil, :arglists (quote ([input-map])), :end-column 16, :end-line 19, :column 7, :line 19}, :name wordcount.core/make-list, :variadic false, :file "src/wordcount/core.cljs", :end-column 16, :method-params ([input-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([input-map])), :test true}, create-word-map {:protocol-inline nil, :meta {:file nil, :arglists (quote ([wordlist])), :end-column 22, :end-line 16, :column 7, :line 16}, :name wordcount.core/create-word-map, :variadic false, :file "src/wordcount/core.cljs", :end-column 22, :method-params ([wordlist]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([wordlist])), :test true}, add-word {:protocol-inline nil, :meta {:file nil, :arglists (quote ([wordmap word])), :end-column 15, :end-line 12, :column 7, :line 12}, :name wordcount.core/add-word, :variadic false, :file "src/wordcount/core.cljs", :end-column 15, :method-params ([wordmap word]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([wordmap word])), :test true}, conn {:file "src/wordcount/core.cljs", :meta {:file nil, :end-column 14, :end-line 7, :column 10, :line 7}, :line 7, :column 1, :end-line 7, :end-column 14, :test true, :name wordcount.core/conn}}, :imports nil, :requires {ev domina.events, domina.events domina.events, dom domina, domina domina, cstr clojure.string, clojure.string clojure.string, clojure.browser.repl clojure.browser.repl, repl clojure.browser.repl}, :uses nil, :require-macros nil, :use-macros nil, :excludes #{}, :doc nil, :name wordcount.core}