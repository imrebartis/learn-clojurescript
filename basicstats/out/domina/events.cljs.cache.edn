;; Analyzed by ClojureScript 0.0-3169
{:defs {target {:protocol-inline nil, :meta {:file nil, :arglists (quote ([evt])), :doc "Returns the target of the event", :protocol domina.events/Event, :end-column 10, :end-line 11, :column 4, :line 11}, :protocol domina.events/Event, :name domina.events/target, :variadic false, :file "out/domina/events.cljs", :end-column 10, :method-params ([evt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 8, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([evt])), :doc "Returns the target of the event", :test true}, listen! {:protocol-inline nil, :meta {:file nil, :arglists (quote ([type listener] [content type listener])), :doc "Add an event listener to each node in a DomContent. Listens for events during the bubble phase. Returns a sequence of listener keys (one for each item in the content). If content is omitted, binds a listener to the document's root element.", :end-column 14, :end-line 54, :column 7, :line 54}, :name domina.events/listen!, :variadic false, :file "out/domina/events.cljs", :end-column 14, :method-params ([type listener] [content type listener]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:tag any, :variadic false, :max-fixed-arity 3}), :line 54, :end-line 54, :max-fixed-arity 3, :fn-var true, :arglists (quote ([type listener] [content type listener])), :doc "Add an event listener to each node in a DomContent. Listens for events during the bubble phase. Returns a sequence of listener keys (one for each item in the content). If content is omitted, binds a listener to the document's root element.", :test true}, dispatch-event-target! {:protocol-inline nil, :meta {:file nil, :arglists (quote ([source evt])), :doc "Intended for internal/testing use only. Clients should prefer dispatch!. Dispatches an event using GClosure's event handling. The event source must extend goog.event.EventTarget", :end-column 29, :end-line 117, :column 7, :line 117}, :name domina.events/dispatch-event-target!, :variadic false, :file "out/domina/events.cljs", :end-column 29, :method-params ([source evt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([source evt])), :doc "Intended for internal/testing use only. Clients should prefer dispatch!. Dispatches an event using GClosure's event handling. The event source must extend goog.event.EventTarget", :test true}, event-type {:protocol-inline nil, :meta {:file nil, :arglists (quote ([evt])), :doc "Returns the type of the the event", :protocol domina.events/Event, :end-column 14, :end-line 13, :column 4, :line 13}, :protocol domina.events/Event, :name domina.events/event-type, :variadic false, :file "out/domina/events.cljs", :end-column 14, :method-params ([evt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 8, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([evt])), :doc "Returns the type of the the event", :test true}, current-target {:protocol-inline nil, :meta {:file nil, :arglists (quote ([evt])), :doc "Returns the object that had the listener attached", :protocol domina.events/Event, :end-column 18, :end-line 12, :column 4, :line 12}, :protocol domina.events/Event, :name domina.events/current-target, :variadic false, :file "out/domina/events.cljs", :end-column 18, :method-params ([evt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 8, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([evt])), :doc "Returns the object that had the listener attached", :test true}, root-element {:file "out/domina/events.cljs", :meta {:file nil, :end-column 18, :end-line 17, :column 6, :line 17}, :line 17, :column 1, :end-line 17, :end-column 18, :test true, :name domina.events/root-element}, listen-once! {:protocol-inline nil, :meta {:file nil, :arglists (quote ([type listener] [content type listener])), :doc "Add an event listener to each node in a DomContent. Listens for events during the bubble phase. De-registers the listener after the first time it is invoked.  Returns a sequence of listener keys (one for each item in the content). If content is omitted, binds a listener to the document's root element.", :end-column 19, :end-line 66, :column 7, :line 66}, :name domina.events/listen-once!, :variadic false, :file "out/domina/events.cljs", :end-column 19, :method-params ([type listener] [content type listener]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:tag any, :variadic false, :max-fixed-arity 3}), :line 66, :end-line 66, :max-fixed-arity 3, :fn-var true, :arglists (quote ([type listener] [content type listener])), :doc "Add an event listener to each node in a DomContent. Listens for events during the bubble phase. De-registers the listener after the first time it is invoked.  Returns a sequence of listener keys (one for each item in the content). If content is omitted, binds a listener to the document's root element.", :test true}, dispatch! {:protocol-inline nil, :meta {:file nil, :arglists (quote ([type evt-map] [source type evt-map])), :doc "Dispatches an event of the given type, adding the values in event map to the event object. Optionally takes an event source. If none is provided, dispatches on the document's root element. Returns false if any handlers called prevent-default, otherwise true.", :end-column 16, :end-line 128, :column 7, :line 128}, :name domina.events/dispatch!, :variadic false, :file "out/domina/events.cljs", :end-column 16, :method-params ([type evt-map] [source type evt-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:tag any, :variadic false, :max-fixed-arity 3}), :line 128, :end-line 128, :max-fixed-arity 3, :fn-var true, :arglists (quote ([type evt-map] [source type evt-map])), :doc "Dispatches an event of the given type, adding the values in event map to the event object. Optionally takes an event source. If none is provided, dispatches on the document's root element. Returns false if any handlers called prevent-default, otherwise true.", :test true}, capture! {:protocol-inline nil, :meta {:file nil, :arglists (quote ([type listener] [content type listener])), :doc "Add an event listener to each node in a DomContent. Listens for events during the capture phase.  Returns a sequence of listener keys (one for each item in the content). If content is omitted, binds a listener to the document's root element.", :end-column 15, :end-line 60, :column 7, :line 60}, :name domina.events/capture!, :variadic false, :file "out/domina/events.cljs", :end-column 15, :method-params ([type listener] [content type listener]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:tag any, :variadic false, :max-fixed-arity 3}), :line 60, :end-line 60, :max-fixed-arity 3, :fn-var true, :arglists (quote ([type listener] [content type listener])), :doc "Add an event listener to each node in a DomContent. Listens for events during the capture phase.  Returns a sequence of listener keys (one for each item in the content). If content is omitted, binds a listener to the document's root element.", :test true}, dispatch-browser! {:protocol-inline nil, :meta {:file nil, :arglists (quote ([source evt])), :doc "Intended for internal/testing use only. Clients should prefer dispatch!. Dispatches an event as a simulated browser event from the given source node. Emulates capture/bubble behavior. Returns false if any handlers called prevent-default, otherwise true.", :end-column 24, :end-line 100, :column 7, :line 100}, :name domina.events/dispatch-browser!, :variadic false, :file "out/domina/events.cljs", :end-column 24, :method-params ([source evt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 100, :end-line 100, :max-fixed-arity 2, :fn-var true, :arglists (quote ([source evt])), :doc "Intended for internal/testing use only. Clients should prefer dispatch!. Dispatches an event as a simulated browser event from the given source node. Emulates capture/bubble behavior. Returns false if any handlers called prevent-default, otherwise true.", :test true}, prevent-default {:protocol-inline nil, :meta {:file nil, :arglists (quote ([evt])), :doc "Prevents the default action, for example a link redirecting to a URL", :protocol domina.events/Event, :end-column 19, :end-line 9, :column 4, :line 9}, :protocol domina.events/Event, :name domina.events/prevent-default, :variadic false, :file "out/domina/events.cljs", :end-column 19, :method-params ([evt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 8, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([evt])), :doc "Prevents the default action, for example a link redirecting to a URL", :test true}, capture-once! {:protocol-inline nil, :meta {:file nil, :arglists (quote ([type listener] [content type listener])), :doc "Add an event listener to each node in a DomContent. Listens for events during the capture phase. De-registers the listener after the first time it is invoked.  Returns a sequence of listener keys (one for each item in the content). If content is omitted, binds a listener to the document's root element.", :end-column 20, :end-line 72, :column 7, :line 72}, :name domina.events/capture-once!, :variadic false, :file "out/domina/events.cljs", :end-column 20, :method-params ([type listener] [content type listener]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:tag any, :variadic false, :max-fixed-arity 3}), :line 72, :end-line 72, :max-fixed-arity 3, :fn-var true, :arglists (quote ([type listener] [content type listener])), :doc "Add an event listener to each node in a DomContent. Listens for events during the capture phase. De-registers the listener after the first time it is invoked.  Returns a sequence of listener keys (one for each item in the content). If content is omitted, binds a listener to the document's root element.", :test true}, listen-internal! {:protocol-inline nil, :meta {:file nil, :arglists (quote ([content type listener capture once])), :private true, :end-column 24, :end-line 45, :column 8, :line 45}, :private true, :name domina.events/listen-internal!, :variadic false, :file "out/domina/events.cljs", :end-column 24, :method-params ([content type listener capture once]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 5}), :line 45, :end-line 45, :max-fixed-arity 5, :fn-var true, :arglists (quote ([content type listener capture once])), :test true}, t823 {:num-fields 4, :protocols #{domina.events/Event cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :name domina.events/t823, :file "out/domina/events.cljs", :type true, :anonymous true, :column 8, :line 28, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, Event {:meta {:file nil, :protocol-info {:methods {prevent-default [[evt]], stop-propagation [[evt]], target [[evt]], current-target [[evt]], event-type [[evt]], raw-event [[evt]]}}, :protocol-symbol true, :doc nil, :end-column 19, :end-line 8, :column 14, :line 8}, :protocol-symbol true, :name domina.events/Event, :file "out/domina/events.cljs", :end-column 19, :column 1, :line 8, :protocol-info {:methods {prevent-default [[evt]], stop-propagation [[evt]], target [[evt]], current-target [[evt]], event-type [[evt]], raw-event [[evt]]}}, :info nil, :end-line 8, :impls #{domina.events/t823 domina.events/t826}, :doc nil, :test true}, stop-propagation {:protocol-inline nil, :meta {:file nil, :arglists (quote ([evt])), :doc "Stops event propagation", :protocol domina.events/Event, :end-column 20, :end-line 10, :column 4, :line 10}, :protocol domina.events/Event, :name domina.events/stop-propagation, :variadic false, :file "out/domina/events.cljs", :end-column 20, :method-params ([evt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 8, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([evt])), :doc "Stops event propagation", :test true}, is-event-target? {:protocol-inline nil, :meta {:file nil, :arglists (quote ([o])), :doc "Tests whether the object is a goog.event.EventTarget", :private true, :end-column 24, :end-line 122, :column 8, :line 122}, :private true, :name domina.events/is-event-target?, :variadic false, :file "out/domina/events.cljs", :end-column 24, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 122, :end-line 122, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o])), :doc "Tests whether the object is a goog.event.EventTarget", :test true}, create-listener-function {:protocol-inline nil, :meta {:file nil, :arglists (quote ([f])), :private true, :end-column 32, :end-line 25, :column 8, :line 25}, :private true, :name domina.events/create-listener-function, :variadic false, :file "out/domina/events.cljs", :end-column 32, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, get-listeners {:protocol-inline nil, :meta {:file nil, :arglists (quote ([content type])), :doc "Returns a sequence of event listeners for all the nodes in the\ncontent of a given type.", :end-column 20, :end-line 143, :column 7, :line 143}, :name domina.events/get-listeners, :variadic false, :file "out/domina/events.cljs", :end-column 20, :method-params ([content type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 143, :end-line 143, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content type])), :doc "Returns a sequence of event listeners for all the nodes in the\ncontent of a given type.", :test true}, t826 {:num-fields 4, :protocols #{domina.events/Event cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :name domina.events/t826, :file "out/domina/events.cljs", :type true, :anonymous true, :column 8, :line 28, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, raw-event {:protocol-inline nil, :meta {:file nil, :arglists (quote ([evt])), :doc "Returns the original GClosure event", :protocol domina.events/Event, :end-column 13, :end-line 14, :column 4, :line 14}, :protocol domina.events/Event, :name domina.events/raw-event, :variadic false, :file "out/domina/events.cljs", :end-column 13, :method-params ([evt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 8, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([evt])), :doc "Returns the original GClosure event", :test true}, unlisten! {:protocol-inline nil, :meta {:file nil, :arglists (quote ([] [content] [content type])), :doc "Removes event listeners from each node in the content. If a listener type is supplied, removes only listeners of that type. If content is omitted, it will remove listeners from the document's root element.", :end-column 16, :end-line 78, :column 7, :line 78}, :name domina.events/unlisten!, :variadic false, :file "out/domina/events.cljs", :end-column 16, :method-params ([] [content] [content type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0} {:tag clj-nil, :variadic false, :max-fixed-arity 1} {:tag clj-nil, :variadic false, :max-fixed-arity 2}), :line 78, :end-line 78, :max-fixed-arity 2, :fn-var true, :arglists (quote ([] [content] [content type])), :doc "Removes event listeners from each node in the content. If a listener type is supplied, removes only listeners of that type. If content is omitted, it will remove listeners from the document's root element.", :test true}, ->t826 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([evt f create-listener-function meta827])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{domina.events/Event cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :anonymous true}, :protocols #{domina.events/Event cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :name domina.events/->t826, :variadic false, :file "out/domina/events.cljs", :method-params ([evt f create-listener-function meta827]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 8, :factory :positional, :methods ({:tag domina.events/t826, :variadic false, :max-fixed-arity 4}), :line 28, :max-fixed-arity 4, :fn-var true, :arglists (quote ([evt f create-listener-function meta827])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :test true}, unlisten-by-key! {:protocol-inline nil, :meta {:file nil, :arglists (quote ([key])), :doc "Given a listener key, removes the listener.", :end-column 23, :end-line 138, :column 7, :line 138}, :name domina.events/unlisten-by-key!, :variadic false, :file "out/domina/events.cljs", :end-column 23, :method-params ([key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 138, :end-line 138, :max-fixed-arity 1, :fn-var true, :arglists (quote ([key])), :doc "Given a listener key, removes the listener.", :test true}, ->t823 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([evt f create-listener-function meta824])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{domina.events/Event cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :anonymous true}, :protocols #{domina.events/Event cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :name domina.events/->t823, :variadic false, :file "out/domina/events.cljs", :method-params ([evt f create-listener-function meta824]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 8, :factory :positional, :methods ({:tag domina.events/t823, :variadic false, :max-fixed-arity 4}), :line 28, :max-fixed-arity 4, :fn-var true, :arglists (quote ([evt f create-listener-function meta824])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :test true}, ancestor-nodes {:protocol-inline nil, :meta {:file nil, :arglists (quote ([n] [n so-far])), :doc "Returns a seq of a node and its ancestors, starting with the document root.", :private true, :end-column 22, :end-line 89, :column 8, :line 89}, :private true, :name domina.events/ancestor-nodes, :variadic false, :file "out/domina/events.cljs", :end-column 22, :method-params ([n] [n so-far]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:variadic false, :max-fixed-arity 2}), :line 89, :end-line 89, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n] [n so-far])), :doc "Returns a seq of a node and its ancestors, starting with the document root.", :test true}}, :imports nil, :requires {events goog.events, goog.events goog.events, gobj goog.object, goog.object goog.object, domina domina}, :uses nil, :require-macros nil, :use-macros nil, :excludes #{}, :doc nil, :name domina.events}